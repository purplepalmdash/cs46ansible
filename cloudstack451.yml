---
########################### 1. Install ssh key ##################################

#- hosts: all
#  sudo: yes
#  gather_facts: no
#  remote_user: root
#
#  tasks:
#
#  - name: install ssh key
#    authorized_key: user=root
#                    key="{{ lookup('file', '/root/.ssh/id_rsa.pub') }}" 
#                    state=present
#
#  - name: Configure CloudStack Agent repo
#    template: src=templates/cloudstack45.repo.j2 dest=/etc/yum.repos.d/cloudstack45.repo mode=0644
#
#  #- name: Configure root cnf file for MySQL
#  #  template: src=templates/root/.my.cnf dest=/root/.my.cnf
#
#  #######################################################
#  #  Remove CentOS Repo
#  #
#  - name: Remove Origin CentOS Repo
#    shell: mv -f /etc/yum.repos.d/CentOS-* /root/ 2>/dev/null
#    ignore_errors: yes
#
#  #######################################################
#  #  Re-make Repo Cache
#  #
#  - name: Re-generate the repository cache
#    shell: yum clean all && yum makecache
#
############################ 2. Set the fqdn and hostname ##################################
### todo, how to replace fqdn and hostname with the item in inventory? 
#
#- hosts: cloudstackmanagement
#  remote_user: root
#  roles:
#      - { role: ansible-fqdn, fqdn: "csmgmt.example.com", hostname: "csmgmt" }
#
############################ 3. Set the ntp ##################################
#- hosts: cloudstackmanagement
#  remote_user: root
#  roles:
#      - role: ansible-role-ntp
#        ntp_config_server: [2.ubuntu.pool.ntp.org, 1.ubuntu.pool.ntp.org, 3.cn.pool.ntp.org]
#
############################ 4. Set the SELinux ##################################
#- hosts: all
#  sudo: yes
#  gather_facts: no
#  remote_user: root
#
#  tasks:
#
#    - name: Set SELinux to disabled
#      selinux: policy=targeted state=disabled
#
#    - name: Disable SELinux for now
#      ignore_errors: true
#      shell: setenforce 0 
#
#
############################ 6. Set the epel Repository ##################################
#- hosts: all
#  sudo: yes
#  gather_facts: no
#  remote_user: root
#
#  tasks:
#
#    - name: Install wget/vim/nethogs/python-pip
#      yum: name={{ item }} state=present
#      with_items:
#        - wget
#        - vim
#        - nethogs
#        - python-pip
#
############################ 6.5. Install nfs server and utils ##################################
#- hosts: all
#  sudo: yes
#  gather_facts: no
#  remote_user: root
#
#  tasks:
#
#    - name: Make the nfs directory
#      shell: mkdir -p /home/public && chmod 777 -R /home/public
#
#    - name: Make the nfs pri directory
#      shell: mkdir -p /home/pri && chmod 777 -R /home/pri
#
#- hosts: cloudstackmanagement
#  remote_user: root
#  roles:
#      - role: ansible-role-nfs
#        nfs_exports: { "/home/public *(rw,sync,no_root_squash)", "/home/pri *(rw,sync,no_root_squash)" }
#
############################ 7. Install mysql for holding the data ##################################
#- hosts: cloudstackmanagement
#  remote_user: root
#
#  tasks:
#
#    - name: Install MySQL server
#      yum: name=mysql-server state=present
#  
#    - name: Install MySQL python module
#      yum: name=MySQL-python state=present
#
############################ 8. Configure the database ##################################
## Should only run once. 
#    - name: Append CloudStack specific settings to my.cnf
#      lineinfile: dest=/etc/my.cnf
#                  insertbefore="^\[mysqld_safe\]"
#                  line="# CloudStack MySQL settings\\ninnodb_rollback_on_timeout=1\\ninnodb_lock_wait_timeout=600\\nmax_connections={{ MySQLMaxConnections }}\\nlog-bin=mysql-bin\\nbinlog-format = \\'ROW\\'\\n" 
#                  state=present
#
#
############################ 9. Start service and remove users ##################################
#    - name: Start the MySQL daemon 
#      service: name=mysqld state=started enabled=true
#
## Just run once.          
#    - name: Remove anonymous MySQL user for {{ ansible_hostname }}
#      action: mysql_user user="" host="{{ ansible_hostname }}" state="absent"
#      run_once: true
#
#    - name: Remove anonymous MySQL user for {{ ansible_fqdn }}
#      action: mysql_user user="" host="{{ ansible_fqdn }}" state="absent"
#      run_once: true
#
#    - name: Remove anonymous MySQL user for localhost
#      action: mysql_user user="" state="absent"
#      run_once: true
#
#    - name: Remove the MySQL test DB
#      action: mysql_db db=test state=absent
#      run_once: true
#
#    - name: Secure MySQL installation / change root user password
#      mysql_user: login_user=root
#                  login_password=''
#                  name=root
#                  password={{ MySQLPass | mandatory }} 
#                  priv=*.*:ALL,GRANT
#                  host={{ item }}
#      with_items:
#        - "{{ ansible_hostname }}"
#        - "{{ ansible_fqdn }}"
#        - 127.0.0.1
#        - ::1
#        - localhost
#      run_once: true
#
#    - name: Open MySQL tcp 3306
#      shell: iptables -A INPUT -p tcp -m tcp --dport 3306 -j ACCEPT
#
############################  Install cloudstack management server ##################################
#- hosts: cloudstackmanagement
#  sudo: yes
#  gather_facts: no
#  remote_user: root
#
#  tasks:
#
#    - name: Install CloudStack management server
#      yum: name=cloudstack-management state=present
#
#    - name: Configure CloudStack database connectvity on additional management server
#      shell: cloudstack-setup-databases {{ CloudDBUser }}:{{ CloudDBPass | mandatory }}@localhost --deploy-as={{ MySQLRoot }}:{{ MySQLPass | mandatory }} -i `ifconfig | sed -En 's/127.0.0.1//;s/.*inet (addr:)?(([0-9]*\.){3}[0-9]*).*/\2/p'`>> /root/cs_dbinstall.out 2>&1
#
#
#- hosts: cloudstackmanagement
#  sudo: yes
#  gather_facts: no
#  remote_user: root
#
#  tasks:
#    - name: make dir of /mnt1
#      shell: mkdir /mnt1
#
#    - name: Mount NFS secondary storage
#      mount: name=/mnt1 src={{ ManagementIP }}:/home/public fstype=nfs state=mounted
#
- hosts: cloudstackmanagement
  sudo: yes
  gather_facts: no
  remote_user: root
  tasks:
    - name: Download CloudStack 4.5 system VM template(kvm)
      shell: /usr/share/cloudstack-common/scripts/storage/secondary/cloud-install-sys-tmplt -m /mnt1 -u {{ SysTemplateURLurl45 }} -h kvm -F

    - name: Umount NFS secondary storage
      mount: name=/mnt1 src={{ ManagementIP }}:/home/public fstype=nfs state=absent

    - name: Open Cloudstack tcp 8080
      shell: iptables -A INPUT -p tcp -m tcp --dport 8080 -j ACCEPT
              
    - name: Start CloudStack Management Service
      shell: cloudstack-setup-management

     # - name: Save iptables
     #   service: name=iptables state=restarted
 
     # - name: save iptables
     #   shell: /sbin/service iptables save
 
    - name: Copy pip cache To Destination
      copy: src=templates/pipcache2.tar.gz dest=/root/pipcache2.tar.gz owner=root group=root mode=0644

    - name: Tar Remotely
      shell: tar xzvf /root/pipcache2.tar.gz

    - name: Install CloudMonkey
      shell: pip install --no-index --find-links /root/pipcache2 argparse && pip install --no-index --find-links /root/pipcache2 argcomplete &&  pip install --no-index --find-links /root/pipcache2 requests && pip install --no-index --find-links /root/pipcache2 argcomplete && pip install --no-index --find-links /root/pipcache2 prettytable && pip install --no-index --find-links /root/pipcache2 Pygments && pip install --no-index --find-links /root/pipcache2 cloudmonkey

- hosts: cloudstackagent
  sudo: yes
  gather_facts: no
  remote_user: root

  tasks:
    - name: Install Cloudstack-agent
      yum: name=cloud-agent state=present

    - name: Configure the qemu.conf
      shell: sed -i 's/#vnc_listen = "0.0.0.0"/vnc_listen = "0.0.0.0"/g' /etc/libvirt/qemu.conf

    - name: Configure the libvirtd.conf
      shell: sed -i 's/#listen_tls = 0/listen_tls = 0/g' /etc/libvirt/libvirtd.conf && sed -i 's/#listen_tcp = 1/listen_tcp = 1/g' /etc/libvirt/libvirtd.conf && sed -i 's/#tcp_port = "16509"/tcp_port = "16509"/g' /etc/libvirt/libvirtd.conf && sed -i 's/#auth_tcp = "sasl"/auth_tcp = "none"/g' /etc/libvirt/libvirtd.conf && sed -i 's/#mdns_adv = 1/mdns_adv = 0/g' /etc/libvirt/libvirtd.conf

    - name: Configure the sysconfig libvirtd.conf
      shell: sed -i 's/#LIBVIRTD_ARGS="--listen"/LIBVIRTD_ARGS="--listen"/g' /etc/sysconfig/libvirtd 

    - name: Restart the libvirtd
      service: name=libvirtd state=restarted

